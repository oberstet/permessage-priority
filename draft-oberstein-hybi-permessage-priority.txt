 



Hybi Working Group                                          T. Oberstein
Internet-Draft                                              Tavendo GmbH
Intended Status: Standards Track                        January 16, 2014



               Message Priority Extension for WebSocket 
                draft-oberstein-hybi-permessage-priority


Abstract

   This document specifies an extension to the WebSocket protocol that
   adds message priorities to WebSocket data messages. Endpoints and
   intermediaries supporting this extension can prioritize the
   transmission of WebSocket messages according to assigned priorities.
   The strict message ordering requirement of WebSocket is relaxed,
   allowing to transmit messages of high priority without blocking of
   transmission when a low priority message is already being sent.

   Please send feedback to the hybi@ietf.org mailing list.

Status of this Memo

   This Internet-Draft is submitted to IETF in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups.  Note that
   other groups may also distribute working documents as
   Internet-Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/1id-abstracts.html

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html


Copyright and License Notice

   Copyright (c) 2014 IETF Trust and the persons identified as the
   document authors. All rights reserved.
 


Oberstein                Expires July 20, 2014                  [Page 1]

Internet-Draft      Priority Extension for WebSocket        January 2014


   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document. Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document. Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.



Table of Contents

   1  Introduction  . . . . . . . . . . . . . . . . . . . . . . . . .  3
     1.1  Conformance Requirements and Complementary Terminology  . .  3
     1.2  Complementary Terminology . . . . . . . . . . . . . . . . .  3
   2  WebSocket Per-message Priority Extension  . . . . . . . . . . .  4
   3  Extension Negotiation . . . . . . . . . . . . . . . . . . . . .  4
     3.1  Negotiation Examples  . . . . . . . . . . . . . . . . . . .  5
   4  Framing . . . . . . . . . . . . . . . . . . . . . . . . . . . .  5
   5  permessage-priority extension . . . . . . . . . . . . . . . . .  8
     5.1  Reordering Rules  . . . . . . . . . . . . . . . . . . . . .  8
     5.2 Receiving and Sending  . . . . . . . . . . . . . . . . . . .  8
     5.3  Intermediaries  . . . . . . . . . . . . . . . . . . . . . .  9
   6  Security Considerations . . . . . . . . . . . . . . . . . . . . 10
   7  IANA Considerations . . . . . . . . . . . . . . . . . . . . . . 10
     7.1  Registration of the "permessage-priority" WebSocket
          Extension Name  . . . . . . . . . . . . . . . . . . . . . . 10
     7.2  Registration of the "Per-message Priority" WebSocket 
          Framing Header Bit  . . . . . . . . . . . . . . . . . . . . 10
   8  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . 11
   9  References  . . . . . . . . . . . . . . . . . . . . . . . . . . 11
     9.1  Normative References  . . . . . . . . . . . . . . . . . . . 11
     9.2  Informative References  . . . . . . . . . . . . . . . . . . 11
   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . 11












 


Oberstein                Expires July 20, 2014                  [Page 2]

Internet-Draft      Priority Extension for WebSocket        January 2014


1  Introduction

   <Introduction Text>

1.1  Conformance Requirements and Complementary Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].

   Requirements phrased in the imperative as part of algorithms (such as
   "strip any leading space characters" or "return false and abort these
   steps") are to be interpreted with the meaning of the key word
   ("MUST", "SHOULD", "MAY", etc.) used in introducing the algorithm.

   Conformance requirements phrased as algorithms or specific steps can
   be implemented in any manner, so long as the end result is
   equivalent.  In particular, the algorithms defined in this
   specification are intended to be easy to understand and are not
   intended to be performant.

   This document references the procedure to _Fail the WebSocket
   Connection_. This procedure is defined in Section 7.1.7 of [RFC6455].

   This document references the event that _The WebSocket Connection is
   Established_ and the event that _A WebSocket Message Has Been
   Received_. These events are defined in Section 4.1 and Section 6.2,
   respectively, of [RFC6455].


1.2  Complementary Terminology

   This document defines some terms about WebSocket and WebSocket
   Extension mechanism that are underspecified or not defined at all in
   [RFC6455].  This terminology is effective only in this document and
   any other documents that refer to this section.

   Non-control message means a message that consists of non-control
   frames as defined in Section 5.6 of [RFC6455].

   Message payload (or payload of a message) means concatenation of the
   payload data portion of all frames representing a single message, as
   well as how /data/ is formed from in Section 6.2 of [RFC6455].

   Extension in use next to extension X means the extension listed next
   to X in the "Sec-WebSocket-Extensions" header in the server's opening
   handshake as defined in Section 9.1 of [RFC6455].  Such an extension
   is applied to outgoing data from the application right after X on
 


Oberstein                Expires July 20, 2014                  [Page 3]

Internet-Draft      Priority Extension for WebSocket        January 2014


   sender side but applied right before X to incoming data from the
   underlying transport.

   Extension negotiation offer means each element in the "Sec-WebSocket-
   Extensions" header in the client's opening handshake.

   Extension negotiation response means each element in the "Sec-
   WebSocket-Extensions" header in the server's opening handshake.

   Accept an extension negotiation offer means including a corresponding
   extension negotiation response in the "Sec-WebSocket-Extensions"
   header in the server's opening handshake.

   Decline an extension negotiation offer means not including a
   corresponding extension negotiation response in the "Sec-WebSocket-
   Extensions" header in the server's opening handshake.


2  WebSocket Per-message Priority Extension



3  Extension Negotiation

   To offer use of the permessage-priority extension, a client includes
   a "Sec-WebSocket-Extensions" header that contains an element with the
   value "permessage-priority" in the client's opening handshake of the
   WebSocket connection.

   There are no parameters to the extension offer.

   To accept an offer to use the permessage-priority extension, a server
   includes a "Sec-WebSocket-Extensions" header that contains an element
   with the value "permessage-priority" in the server's response during
   the opening handshake of the WebSocket connection.

   There are no parameters to the extension acceptance.

   A server MUST NOT accept a permessage-priority extension offer
   together with another extension if the permessage-priority extension
   will conflict with the other extension on use of the RSV2 bit.  A
   client that receives a response accepting a permessage-priority
   extension offer together with such an extension MUST _Fail the
   WebSocket Connection_.

   A server declines a permessage-priority extension offer by not
   sending a "Sec-WebSocket-Extensions" header or by not including any
   element with the value "permessage-priority" in the "Sec-WebSocket-
 


Oberstein                Expires July 20, 2014                  [Page 4]

Internet-Draft      Priority Extension for WebSocket        January 2014


   Extensions" header in it's response. If a server responds with no
   "Sec-WebSocket-Extensions" header or no "permessage-priority" element
   in the "Sec-WebSocket-Extensions" header, both endpoints proceed
   without permessage-priority extension once _the WebSocket Connection
   is established_.

   If a server responds with a "permessage-priority" in the "Sec-
   WebSocket-Extensions" header and _the WebSocket Connection is
   established_, both endpoints MUST use the algorithm described in
   Section 6 to exchange prioritized WebSocket messages.


3.1  Negotiation Examples

   The following are examples for the "Sec-WebSocket-Extensions" header
   in WebSocket opening handshake client requests and server responses-

   Client and server negotiate and agree to use permessage-priority
   extension:

      Offer (client-to-server HTTP request header):

         Sec-WebSocket-Extensions: permessage-priority

      Accept (server-to-client HTTP response header):

         Sec-WebSocket-Extensions: permessage-priority


   Client offers, but server denies to use permessage-priority
   extension:

      Offer (client-to-server HTTP request header):

         Sec-WebSocket-Extensions: permessage-priority

      Deny (server-to-client HTTP response header):

         Sec-WebSocket-Extensions:


4  Framing

   The permessage-priority extension operates only on non-control
   messages. Control messages remain completely unchanged.

   This document allocates the RSV2 bit of the WebSocket header for the
   permessage-priority extension, and calls the bit "Per-message
 


Oberstein                Expires July 20, 2014                  [Page 5]

Internet-Draft      Priority Extension for WebSocket        January 2014


   Priority". On a WebSocket connection where the permessage-priority
   extension is in use, this bit indicates whether a message is
   prioritized or not.

   A prioritized message has the "Per-message Priority" bit set on the
   first and all subsequent fragments of the message.

   The first fragment of a prioritized message has the RSV2 bit set and
   contains "Message ID", "Message Priority" and "Response Priority
   Hint" fields:

         0                   1                   2                   3  
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1   
    + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +   
    |                       Frame Header (RSV2 set)                 |   
    +---------------------------------------------------------------+   
    |                          Message ID                           |   
    +-------------------------------+-------------------------------+   
    |       Message Priority        |    Response Priority Hint     |   
    +-------------------------------+-------------------------------+   
    |                         Payload Data                          |   
    +---------------------------------------------------------------+


   Subsequent fragments of a prioritized message have the RSV2 bit set
   and contain the "Message ID" field:

         0                   1                   2                   3  
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1   
    + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +   
    |                       Frame Header (RSV2 set)                 |   
    +---------------------------------------------------------------+   
    |                          Message ID                           |   
    +---------------------------------------------------------------+   
    |                         Payload Data                          |   
    +---------------------------------------------------------------+


   Fragments of non-prioritized messages have the RSV2 bit unset, and
   are unchanged to the WebSocket base protocol:

         0                   1                   2                   3  
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1   
    + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +   
    |                       Frame Header (RSV2 unset)               |   
    +---------------------------------------------------------------+   
    |                         Payload Data                          |   
    +---------------------------------------------------------------+
 


Oberstein                Expires July 20, 2014                  [Page 6]

Internet-Draft      Priority Extension for WebSocket        January 2014


   Message ID:   32 bit

      The "Message ID" is interpreted as an unsigned integer in network
      byte order and provides a sender-chosen ID for the prioritized
      message. The ID carries no semantic meaning and is used by the
      receiver to correlate frames that form fragments of a given
      message. The ID 0 MUST NOT be used on prioritized messages. A peer
      receiving a prioritized message with ID 0 MUST _Fail the WebSocket
      Connection_.

   Message Priority:  16 bit

      The "Message Priority" is interpreted as an unsigned integer in
      network byte order and provides the desired message priority for
      sending. The value 0 is the lowest priority, the value 65535 is
      the highest priority.

   Response Priority Hint:  16 bit

      The "Response Priority Hint" is interpreted as an unsigned integer
      in network byte order and provides a hint to the receiver for the
      message priority to use when replying to the received message, in
      case the sent message is part of a request/response message
      exchange. The value 0 is the lowest priority, the value 65535 is
      the highest priority.

   4.1  Fragment Processing

   The rules for processing fragmented messages as defined in the
   WebSocket base protocol apply to permessage-priority extension on a
   per "Message ID" basis.

   In particular:

      1. For fragmented messages, all but the first fragment MUST have
      "Opcode" 0, and the last frame has it's FIN bit set.

      2. All continuation fragments of a fragmented message for a given
      ID MUST have "Opcode" 0. A peer MUST _Fail the WebSocket
      Connection_ when a non-continuation frame for an already started
      message ID is received.

      3. When a continuation frame is received for a message ID that was
      not yet started, the peer MUST _Fail the WebSocket Connection_.

   Since non-prioritized messages have an implicit "Message ID" 0, above
   applies to all messages.

 


Oberstein                Expires July 20, 2014                  [Page 7]

Internet-Draft      Priority Extension for WebSocket        January 2014


5  permessage-priority extension

5.1  Reordering Rules

   A frame of a message being sent with "Message Priority" P MAY be
   pulled ahead another frame inside the frame send queue, if and only
   if the other frame's "Message Priority" is strictly smaller than P.

   In other words, frames of messages with equal "Message Priority" are
   never reordered, and a frame of a message of low priority is never
   pulled ahead of frames of messages with high priority.

   Frames belonging to a single message, prioritized or non-prioritized
   MUST never be reordered.


5.2 Receiving and Sending

   Upon receiving a non-control frame with the RSV2 bit set:

      1. Read the "Message ID" and determine whether a prioritized
      message with that ID was started

      2. If no prioritized message with the received ID was started,
      read and remember "Message Priority" and "Response Priority Hint"
      and process the rest of the frame's payload as application data

      3. If a prioritized message with the received ID was already
      started, process the rest of the frame's payload as application
      data

   Upon receiving a non-control frame with the RSV2 bit unset:

      1. Treat the message as if a prioritized message with "Message ID"
      0, "Message Priority" 65535 and "Response Priority Hint" 65535
      would be processed

      2. Process the complete frame payload as application data

   Upon receiving a non-control frame with the FIN bit set:

      1. Fire the _A WebSocket Message Has Been Received_ event with the
      application payload received for the message with the given ID.

      2. Mark the message ID as non-started.


   Upon sending a message prioritized with "Message Priority" P and
 


Oberstein                Expires July 20, 2014                  [Page 8]

Internet-Draft      Priority Extension for WebSocket        January 2014


   "Response Priority Hint" H

      1. generate a new "Message ID" - ensuring that the ID is not
      currently in use

      2. fragment the message and produce message frames according to
      the format outlined in section 4

      3. enqueue the message fragments into the sending queue,
      reordering frames inside the queue according to P and the
      priorities of the messages corresponding to the frames already
      queued


5.3  Intermediaries

   Intermediaries aware of the permessage-priority extension

      1. MAY further fragment a given fragment of a given prioritized
      message into two or more fragments preserving the frame structure
      as outline in section 4

      2. MAY coalesce two or more consecutive fragments of a given
      prioritized message preserving the frame structure as outline in
      section 4

   and

      1. SHOULD reorder fragments of messages for processing, sending
      and forwarding according to the rules outlined in section 5.1

   Intermediaries unaware of the permessage-priority extension

      1. MUST NOT change the message fragmentation (further fragment or
      coalesce non-control frames)

      2. MUST preserve strict frame order while processing and
      forwarding non-control frames

      3. MUST ignore WebSocket base protocol rules as they apply to
      continuation frames and the FIN bit

   or

      1. MUST remove the "permessage-priority" element from the client's
      "Sec-WebSocket-Extensions" header in the opening handshake


 


Oberstein                Expires July 20, 2014                  [Page 9]

Internet-Draft      Priority Extension for WebSocket        January 2014


6  Security Considerations

   With Per-message Priority Extension active, there can be more than
   one message in flight in each direction, and hence, additional
   buffering might be required on endpoints and intermediaries.

   A rogue implementation or an attacker might use this to mount a
   denial-of-service attack, exhausting memory in the target. For
   example, an attacker might start a large number of prioritized
   messages, but never end them.

   WebSocket endpoints and intermediaries supporting the Per-message
   Priority Extension SHOULD therefor provide means to effectively limit
   the total buffering memory in use on a WebSocket connection, and fail
   the WebSocket connection when that limit is reached.


7  IANA Considerations

7.1  Registration of the "permessage-priority" WebSocket Extension Name

   This section describes a WebSocket extension name registration in the
   WebSocket Extension Name Registry [RFC6455].

   Extension Identifier

      permessage-priority

   Extension Common Name

      WebSocket Per-message Priority

   Extension Definition

      This document.

   Known Incompatible Extensions

      None

   The "permessage-priority" extension name is used in the "Sec-
   WebSocket-Extensions" header in the WebSocket opening handshake to
   negotiate use of the permessage-priority extension.


7.2  Registration of the "Per-message Priority" WebSocket Framing Header
   Bit

 


Oberstein                Expires July 20, 2014                 [Page 10]

Internet-Draft      Priority Extension for WebSocket        January 2014


   This section describes a WebSocket framing header bit registration in
   the WebSocket Framing Header Bits Registry [RFC6455].

   Header Bit

      RSV2

   Common Name

      Per-message Priority

   Meaning

      The message is prioritized or not.

   Reference

      Section X of this document.

   The "Per-message Priority" framing header bit is used on all
   fragments of non-control messages to indicate whether the fragment
   belongs to a prioritized message or not.


8  Acknowledgements

   Tbd.


9  References

9.1  Normative References

   [RFC6455]  Fette, I. and A. Melnikov, "The WebSocket Protocol", RFC
              6455, December 2011


9.2  Informative References



Authors' Addresses


   Tobias Oberstein
   Tavendo GmbH

   EMail: tobias.oberstein@tavendo.de
 


Oberstein                Expires July 20, 2014                 [Page 11]

Internet-Draft      Priority Extension for WebSocket        January 2014





















































Oberstein                Expires July 20, 2014                 [Page 12]
