.pl 10.0i
.po 0
.ll 7.2i
.lt 7.2i
.nr LL 7.2i
.nr LT 7.2i
.ds LF Oberstein 
.ds RF FORMFEED[Page %]
.ds LH Internet-Draft
.ds RH January 2014
.ds CH Priority Extension for WebSocket
.ds CF Expires July 20, 2014
.hy 0
.nh
.ad l
.in 0

.nf
.tl 'Hybi Working Group''T. Oberstein'
.tl 'Internet-Draft''Tavendo GmbH'
.tl 'Intended Status: Standards Track''January 16, 2014'
.tl 'Expires: <Expiry Date>'
.fi

.\" Note. The ".tl" directive is used to generate the leading header 
.\" in Internet drafts. The information specified after ".tl" provides
.\" left, center and right components of a line separated by the ' character
.\" in the following manner:
.\" 
.\"  .tl '<left component>'<center component>'<right component>'
.\"
.\" Only the left and right components are used in Internet-draft headers
.\" This and other comments in this template can safely be deleted.

.ce 2
Message Priority Extension for WebSocket 
draft-oberstein-hybi-permessage-priority
.fi
.in 3


.ti 0
Abstract

This document specifies an extension to the WebSocket protocol that adds
message priorities to WebSocket data messages.
Endpoints and intermediaries supporting this extension can prioritize the
transmission of WebSocket messages according to assigned priorities.
The strict message ordering requirement of WebSocket is relaxed, allowing
to transmit messages of high priority without blocking of transmission when
a low priority message is already being sent.

Please send feedback to the hybi@ietf.org mailing list.

.ti 0
Status of this Memo

This Internet-Draft is submitted to IETF in full conformance with the provisions of BCP\078 and BCP\079.

Internet-Drafts are working documents of the Internet Engineering Task Force (IETF), its areas, and its working groups.  Note that other groups may also distribute working documents as \%Internet-Drafts.

Internet-Drafts are draft documents valid for a maximum of six months and may be updated, replaced, or obsoleted by other documents at any time.  It is inappropriate to use Internet-Drafts as reference material or to cite them other than as "work in progress."

The list of current Internet-Drafts can be accessed at \%http://www.ietf.org/1id-abstracts.html

The list of Internet-Draft Shadow Directories can be accessed at http://www.ietf.org/shadow.html


.ti 0
Copyright and License Notice\" Boilerplate from December 2009

.\" NOTE: Insert current <year> in the following paragraph
Copyright (c) 2014 IETF Trust and the persons identified as the document authors. All rights reserved.

This document is subject to BCP\078 and the IETF Trust's Legal Provisions Relating to IETF Documents \%(http://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section\04.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.



.\" \# TD4  -- Set TOC depth by altering this value (TD5 = depth 5)
.\" \# TOC  -- Beginning of auto updated Table of Contents
.in 0
Table of Contents

.nf
   1  Introduction  . . . . . . . . . . . . . . . . . . . . . . . . .  3
     1.1  Conformance Requirements and Terminology  . . . . . . . . .  4
     1.2  Complementary Terminology . . . . . . . . . . . . . . . . .  4
   2  WebSocket Per-message Priority Extension  . . . . . . . . . . .  5
   3  Extension Negotiation . . . . . . . . . . . . . . . . . . . . .  6
     3.1  Negotiation Examples  . . . . . . . . . . . . . . . . . . .  7
   4  Message Framing . . . . . . . . . . . . . . . . . . . . . . . .  7
     4.1  Fragment Processing . . . . . . . . . . . . . . . . . . . .  9
   5  Priority-based Processing . . . . . . . . . . . . . . . . . . . 10
     5.1  Reordering Rules  . . . . . . . . . . . . . . . . . . . . . 10
     5.2  Receiving and Sending . . . . . . . . . . . . . . . . . . . 10
       5.2.1  Receiver Algorithm  . . . . . . . . . . . . . . . . . . 10
       5.2.2  Sender Algorithm  . . . . . . . . . . . . . . . . . . . 11
     5.3  Intermediaries  . . . . . . . . . . . . . . . . . . . . . . 12
   6  Application Programming Interface Guideline . . . . . . . . . . 12
   7  Security Considerations . . . . . . . . . . . . . . . . . . . . 13
   8  IANA Considerations . . . . . . . . . . . . . . . . . . . . . . 14
     8.1  Registration of the "permessage-priority" WebSocket
          Extension Name  . . . . . . . . . . . . . . . . . . . . . . 14
     8.2  Registration of the "Per-message Priority" WebSocket 
          Framing Header Bit  . . . . . . . . . . . . . . . . . . . . 14
   9  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . 15
   10  References . . . . . . . . . . . . . . . . . . . . . . . . . . 15
     10.1  Normative References . . . . . . . . . . . . . . . . . . . 15
     10.2  Informative References . . . . . . . . . . . . . . . . . . 15
   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . 15
.fi
.in 3

.\" \# ETC -- End of auto updated Table of Contents

.bp
.ti 0
1  Introduction

WebSocket provides a bidirectional, full-duplex, reliable message-based channel with strict message ordering.

This document describes an extension to WebSocket that allows priority-based message transmission under application control while still providing well-defined ordering guarantees.

The ability for more flexible message ordering allows to address scenarios where applications would like to transmit messages according to different priorities, minimizing latency for high-priority messages while low-priority messages are being transmitted in parallel.

The described permessage-priority extension targets goals different from the multiplexing ("MUX") efforts started earlier in the context of WebSocket, and different from the multiplexing as being specified in SPDY, HTTP/2.0 and WS/SDPY.

A typical scenario addressed is the following.

Imagine a single-page Web application that consists of a set of static resources (HTML, JavaScript and image files), and that communicates with a backend or cloud service via WebSocket.

Once all the application's static resources have been cached in the browser (potentially supported via Web app manifests), the application will start rapidly and essentially no longer has significant needs for HTTP, but maintain a single, long-lived WebSocket connection to the backend.

However, the application may have a need for transmitting messages over WebSocket of two characteristics: small messages that should be transmitted as fast as possible, and with minimal latency, and messages that carry large amounts of data, that should be transferred making efficient use of available bandwidth, while at the same time not slowing down or delaying the small message that would like to have low-latency QoS.

What is needed is a message prioritization scheme that works on a single WebSocket connection, where payload belonging to low-latency QoS messages is transferred with priority over payload belonging to large, low-priority messages.

This extension does not address scenarios of multiplexing multiple, logical WebSocket connections over a single physical WebSocket connection.

Even in the scenario above, and when the application is open in multiple browser tabs concurrently, the application can already arrange for having only a single WebSocket connection opened to the backend using other mechanisms available with HTML5. For example, the app can open the (single) WebSocket connection from a shared Web worker running in the background and have all application UI tabs communicate with that worker. 


.ti 0
1.1  Conformance Requirements and Terminology

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
"SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be
interpreted as described in RFC 2119 [RFC2119].

Requirements phrased in the imperative as part of algorithms (such as
"strip any leading space characters" or "return false and abort these
steps") are to be interpreted with the meaning of the key word ("MUST", "SHOULD",
"MAY", etc.) used in introducing the algorithm.

Conformance requirements phrased as algorithms or specific steps can be implemented
in any manner, so long as the end result is equivalent.  In particular, the
algorithms defined in this specification are intended to be easy to understand and
are not intended to be performant.

This document references the procedure to _Fail the WebSocket Connection_.
This procedure is defined in Section 7.1.7 of [RFC6455].

This document references the event that _The WebSocket Connection is Established_
and the event that _A WebSocket Message Has Been Received_.
These events are defined in Section 4.1 and Section 6.2, respectively, of [RFC6455].


.ti 0
1.2  Complementary Terminology

This document defines some terms about WebSocket and WebSocket
Extension mechanism that are underspecified or not defined at all in
[RFC6455].  This terminology is effective only in this document and
any other documents that refer to this section.

Non-control message means a message that consists of non-control
frames as defined in Section 5.6 of [RFC6455].

Message payload (or payload of a message) means concatenation of the
payload data portion of all frames representing a single message, as
well as how /data/ is formed from in Section 6.2 of [RFC6455].

Extension in use next to extension X means the extension listed next
to X in the "Sec-WebSocket-Extensions" header in the server's opening
handshake as defined in Section 9.1 of [RFC6455].  Such an extension
is applied to outgoing data from the application right after X on
sender side but applied right before X to incoming data from the
underlying transport.

Extension negotiation offer means each element in the
"Sec-WebSocket-Extensions" header in the client's opening handshake.

Extension negotiation response means each element in the
"Sec-WebSocket-Extensions" header in the server's opening handshake.

Accept an extension negotiation offer means including a corresponding
extension negotiation response in the "Sec-WebSocket-Extensions"
header in the server's opening handshake.

Decline an extension negotiation offer means not including a
corresponding extension negotiation response in the
"Sec-WebSocket-Extensions" header in the server's opening handshake.


.ti 0
2  WebSocket Per-message Priority Extension

The WebSocket permessage-priority extension allows senders of WebSocket messages to specify a priority for the message to be sent, and optionally, specify a priority hint for reply messages in case the message is sent as part of an application-level request/response message exchange.

The extension specifially addresses the scenario where the network connection between two endpoints is unable to keep up with the amount of data to be transferred, and data to be sent queues up at the sending leg due to TCP backpressure.

The queued up data is then reordered before sending so that payload of high-priority messages gets sent earlier than low-priority message payload.

Conceptionally, the sender maintains a priority-based queue of outgoing WebSocket fragments to be sent. When an application enqueues a message to be sent with given priority, the message payload is fragmented, and the fragments are inserted into the outgoing WebSocket frame queue according to the priority specified. In principle, an enqueued WebSocket message frame may be reordered until the frame is finally started to be sent out. In other words, the unit of reordering outgoing data is the WebSocket frame.

The WebSocket permessage-priority extension defines clear rules for reordering (see section 5.1), so applications can still reason about ordering and assign semantics that depend on message order. 

Since, in the presence of the extension, more than one WebSocket message can be in flight (in each direction), the extension introduces "Message IDs" that allow to correlate the payload transmitted in WebSocket fragments for multiple messages in flight.

The core parts of this extension are defined in the following sections:

.in 6
 3. Extension Negotiation

 4. Message Framing

 5. Priority-based Processing
.in 3


.ti 0
3  Extension Negotiation

To offer use of the permessage-priority extension, a client includes a "Sec-WebSocket-Extensions" header that contains an element with the value "permessage-priority" in the client's opening handshake of the WebSocket connection.

There are no parameters to the extension offer.

To accept an offer to use the permessage-priority extension, a server includes a "Sec-WebSocket-Extensions" header that contains an element with the value "permessage-priority" in the server's response during the opening handshake of the WebSocket connection.

There are no parameters to the extension acceptance.

A server MUST NOT accept a permessage-priority extension offer together with another extension if the permessage-priority extension will conflict with the other extension on use of the RSV2 bit.  A client that receives a response accepting a permessage-priority extension offer together with such an extension MUST _Fail the WebSocket Connection_.

A server declines a permessage-priority extension offer by not sending a "Sec-WebSocket-Extensions" header or by not including any element with the value "permessage-priority" in the "Sec-WebSocket-Extensions" header in it's response. If a server responds with no "Sec-WebSocket-Extensions" header or no "permessage-priority" element in the "Sec-WebSocket-Extensions" header, both endpoints proceed without permessage-priority extension once _the WebSocket Connection is established_.

If a server responds with a "permessage-priority" in the "Sec-WebSocket-Extensions" header and _the WebSocket Connection is established_, both endpoints MUST use the algorithm described in Section 6 to exchange prioritized WebSocket messages.


.ti 0
3.1  Negotiation Examples

The following are examples for the "Sec-WebSocket-Extensions" header in WebSocket opening
handshake client requests and server responses-

Client and server negotiate and agree to use permessage-priority extension:

.ti 6
Offer (client-to-server HTTP request header):

.ti 9
Sec-WebSocket-Extensions: permessage-priority

.ti 6
Accept (server-to-client HTTP response header):

.ti 9
Sec-WebSocket-Extensions: permessage-priority


Client offers, but server denies to use permessage-priority extension:

.ti 6
Offer (client-to-server HTTP request header):

.ti 9
Sec-WebSocket-Extensions: permessage-priority

.ti 6
Deny (server-to-client HTTP response header):

.ti 9
Sec-WebSocket-Extensions:


.ti 0
4  Message Framing

The permessage-priority extension operates only on non-control messages. Control messages remain completely unchanged.

This document allocates the RSV2 bit of the WebSocket header for the permessage-priority extension, and calls the bit "Per-message Priority". On a WebSocket connection where the permessage-priority extension is in use, this bit indicates whether a message is prioritized or not.

A prioritized message has the "Per-message Priority" bit set on the first and all subsequent fragments of the message.

The first fragment of a prioritized message has the RSV2 bit set and contains "Message ID", "Message Priority" and "Response Priority Hint" fields:

      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     |                       Frame Header (RSV2 set)                 |
     +---------------------------------------------------------------+
     |                          Message ID                           |
     +-------------------------------+-------------------------------+
     |       Message Priority        |    Response Priority Hint     |
     +-------------------------------+-------------------------------+
     |                         Payload Data                          |
     +---------------------------------------------------------------+


Subsequent fragments of a prioritized message have the RSV2 bit set and contain the "Message ID" field:

      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     |                       Frame Header (RSV2 set)                 |
     +---------------------------------------------------------------+
     |                          Message ID                           |
     +---------------------------------------------------------------+
     |                         Payload Data                          |
     +---------------------------------------------------------------+


Fragments of non-prioritized messages have the RSV2 bit unset, and are unchanged to the WebSocket base protocol:

      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     |                       Frame Header (RSV2 unset)               |
     +---------------------------------------------------------------+
     |                         Payload Data                          |
     +---------------------------------------------------------------+



.ti 3
Message ID:   32 bit

.in 6
The "Message ID" is interpreted as an unsigned integer in network byte order and provides a sender-chosen ID for the prioritized message. The ID carries no semantic meaning and is used by the receiver to correlate frames that form fragments of a given message. The ID 0 MUST NOT be used on prioritized messages. A peer receiving a prioritized message with "Message ID" 0 MUST _Fail the WebSocket Connection_. The ID 0 is used as the implicit ID of non-prioritized messages.
.in 3

.ti 3
Message Priority:  16 bit

.in 6
The "Message Priority" is interpreted as an unsigned integer in network byte order and provides the desired message priority for sending. The value 1 is the highest priority, the value 65535 is the lowest priority. The value 0 MUST NOT be used. A peer receiving a prioritized message with "Message Priority" 0 MUST _Fail the WebSocket Connection_.
.in 3

.ti 3
Response Priority Hint:  16 bit

.in 6
The "Response Priority Hint" is interpreted as an unsigned integer in network byte order and provides a hint to the receiver for the message priority to use when replying to the received message, in case the sent message is part of a request/response message exchange. The value 1 is the highest priority, the value 65535 is the lowest priority. The value 0 indicates that the sender did not specify a hint on response priority (either because the application did not specify response priority, or no response is expected anyway).
.in 3

.ti 0
4.1  Fragment Processing

The rules for processing fragmented messages as defined in the WebSocket base protocol apply to permessage-priority extension on a per "Message ID" basis.

In particular:

.in 6
1. For fragmented messages, all but the first fragment for the given "Message ID" MUST have "Opcode" 0, and the last frame MUST have it's FIN bit set. When a continuation frame is received for a "Message ID" that was not yet started, the peer MUST _Fail the WebSocket Connection_.

2. All continuation frames of a fragmented message for a given "Message ID" MUST have "Opcode" 0. A peer MUST _Fail the WebSocket Connection_ when a non-continuation frame for an already started "Message ID" is received.

Since non-prioritized messages have an implicit "Message ID" 0, above applies to all messages, prioritized or not.
.in 3


.ti 0
5  Priority-based Processing

.ti 0
5.1  Reordering Rules

Frames in the frame send queue are reordered according to these rules:

.in 6
1) A frame of a message being sent with "Message Priority" P MUST be pulled ahead another frame inside the frame send queue, if and only if the other frame's "Message Priority" is strictly smaller than P.

2) Frames that belong to a non-prioritized message are treated like frames belonging to a message with highest priority (and hence P = 1).
.in 3

In other words, frames of messages with equal "Message Priority" are never reordered and a frame of a message of low priority is never pulled ahead of frames of messages with high priority.

Also, frames belonging to a single message, prioritized or non-prioritized are never reordered with respect to each other.



.ti 0
5.2  Receiving and Sending

.ti 0
5.2.1  Receiver Algorithm

Receivers MUST perform an equivalent of the following algorithm.

Upon receiving a non-control frame with the RSV2 bit set:

.in 6
1. Read the "Message ID" and determine whether a prioritized message with that ID was already started

2. If no prioritized message with the received ID was started, read and remember "Message Priority" and "Response Priority Hint" and process the rest of the frame's payload as application data

3. If a prioritized message with the received ID was already started, process the rest of the frame's payload as application data 
.in 3

Upon receiving a non-control frame with the RSV2 bit unset:

.in 6
1. Treat the message as if a prioritized message with "Message ID" 0, "Message Priority" 1 and "Response Priority Hint" 0 would be processed

2. Process the complete frame payload as application data
.in 3

Upon receiving a non-control frame with the FIN bit set:

.in 6
1. Fire the _A WebSocket Message Has Been Received_ event with the application payload received for the message with the given ID

2. Mark the "Message ID" as non-started.
.in 3

Implementations SHOULD provide the "Message Priority" and "Response Priority Hint" for a received message to the application in the _A WebSocket Message Has Been Received_ event as outlined in section 6.


.ti 0
5.2.2  Sender Algorithm

Senders MUST perform an equivalent of maintaining a frame send queue and the following algorithm.

Upon being asked to send message prioritized with "Message Priority" P and "Response Priority Hint" H by the application:

.in 6
1. generate a new "Message ID" - ensuring that the ID is not currently in use

2. fragment the message and produce message frames according to the format outlined in section 4, using the application provided values for "Message Priority" P and "Response Priority Hint" H

3. enqueue the message fragments into the frame send queue, reordering frames inside the queue according to P and the priorities of the messages corresponding to the frames already queued in compliance with the ordering rules outlined in section 5.1
.in 3

Upon being asked to send a non-prioritized message by the application:

.in 6
1. fragment the message; in accordance with section 4, the fragments are just plain WebSocket message fragment with RSV2 unset

2. enqueue the fragment into the frame send queue as if a message with highest priority was enqueued
.in 3

Implementations SHOULD allow applications to specify the "Message Priority" and "Response Priority Hint" for a message to be sent as outlined in section 6.

Implementations SHOULD fragment messages into fragments of 1 - 128kB to balance head-of-line blocking and latency limits with processing overhead and wire-level efficiency.


.ti 0
5.3  Intermediaries

Intermediaries aware of the permessage-priority extension

.in 6
1. MAY further fragment a given fragment of a given prioritized message into two or more fragments preserving the frame structure as outline in section 4

2. MAY coalesce two or more consecutive fragments of a given prioritized message preserving the frame structure as outline in section 4
.in 3

and

.in 6
1. SHOULD reorder fragments of messages for processing, sending and forwarding according to the rules outlined in section 5.1
.in 3

Intermediaries unaware of the permessage-priority extension

.in 6
1. MUST NOT change the message fragmentation (further fragment or coalesce non-control frames)

2. MUST preserve strict frame order while processing and forwarding non-control frames

3. MUST ignore WebSocket base protocol rules as they apply to continuation frames and the FIN bit
.in 3

or

.in 6
1. MUST remove the "permessage-priority" element from the client's "Sec-WebSocket-Extensions" header in the opening handshake
.in 3


.ti 0
6  Application Programming Interface Guideline

Applications SHOULD be able to specify "Message Priority" and "Response Priority Hint" when sending a WebSocket message

.in 6
.nf
// Sending a WebSocket message, specifying "Message Priority" and
// a "Response Priority Hint"
//
socket.send("My awesome message",
               {'priority': 2, 'responsePriority': 5});
.fi
.in 3

Specifying "priority" is optional. If an application does not specify "priority" when sending, the message is sent as an unprioritized WebSocket message.

Specifying "responsePriority" is optional. However, if "responsePriority" is specified by the application, the "priority" MUST also be specified.

The permissible values for both "priority" and "responsePriority" (if specified) are integers in the closed interval [1, 65535].


Applications SHOULD be provided the "Message Priority" and "Response Priority Hint" when receiving a WebSocket message

.in 6
.nf
// Event handler fired upon having received a WebSocket message
//
socket.onmessage = function (evt) {

   // The WebSocket message payload:
   console.log(evt.data);

   // The priority of the received message or null if non-prioritized message:
   console.log(evt.priority);


   // The response priority hint as specified by the sender
   // or null if not provided by the sender or non-prioritized message:
   console.log(evt.responsePriority);
}
.fi
.in 3

The values for both "priority" and "responsePriority" (if non-null) are integers in the closed interval [1, 65535].


.ti 0
7  Security Considerations

With Per-message Priority Extension active, there can be more than one message in flight
in each direction, and hence, additional buffering might be required on endpoints and
intermediaries.

A rogue implementation or an attacker might use this to mount a denial-of-service attack,
exhausting memory in the target. For example, an attacker might start a large number of
prioritized messages, but never end them.

WebSocket endpoints and intermediaries supporting the Per-message Priority Extension SHOULD
therefor provide means to effectively limit the total buffering memory in use on a WebSocket
connection, and fail the WebSocket connection when that limit is reached.


.ti 0
8  IANA Considerations

.ti 0 
8.1  Registration of the "permessage-priority" WebSocket Extension Name

This section describes a WebSocket extension name registration in the WebSocket
Extension Name Registry [RFC6455].

Extension Identifier

.ti 6
permessage-priority

Extension Common Name

.ti 6
WebSocket Per-message Priority

Extension Definition

.ti 6
This document.

Known Incompatible Extensions

.ti 6
None

The "permessage-priority" extension name is used in the "Sec-WebSocket-Extensions"
header in the WebSocket opening handshake to negotiate use of the
permessage-priority extension.


.ti 0
8.2  Registration of the "Per-message Priority" WebSocket Framing Header Bit

This section describes a WebSocket framing header bit registration in the WebSocket
Framing Header Bits Registry [RFC6455].

Header Bit

.ti 6
RSV2

Common Name

.ti 6
Per-message Priority

Meaning

.ti 6
The message is prioritized or not.

Reference

.ti 6
Section 4 of this document.

The "Per-message Priority" framing header bit is used on all fragments of non-control
messages to indicate whether the fragment belongs to a prioritized message or not.


.ti 0
9  Acknowledgements

Tbd.


.ti 0
10  References

.ti 0 
10.1  Normative References

.in 14
.\" \# REF  -- Managed reference list. Syntax: [RFC]nnnn[;Label], ... ,[RFC]nnnn[;Label]
.\" \# 2119;KEYWORDS, 1776, RFC1925;TRUTHS
.\" \# ERF -- End of managed reference list
.\" ----------------------------------------
.\" The reference list can be changed at any time by altering the RFC list in the line below the .\" \# REF directive
.\" In order to execute any change, click on the 'Update All' button or select "Update 'Table of Contents' and References"
.\" from the "Edit" menu or press <F3>.
.\" NOTE: Managed reference list requires NroffEdit version 1.40 or later.
.ti 3
[RFC6455]  Fette, I. and A. Melnikov, "The WebSocket Protocol", RFC 6455, December 2011


.ti 0
10.2  Informative References

.in 14
.\" \# REF  -- Managed reference list. Syntax: [RFC]nnnn[;Label], ... ,[RFC]nnnn[;Label]
.\" \# 3514;EVILBIT, 5513, 5514
.\" \# ERF -- End of managed reference list
.in 3


.ti 0
Authors' Addresses

.sp
.nf
Tobias Oberstein
Tavendo GmbH

EMail: tobias.oberstein@tavendo.de
.sp
.fi

